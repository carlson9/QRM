knitr::opts_chunk$set(echo = TRUE)
setwd('~/QPMRFall2021/inclass/day2Assump/')
library(itsadug)
'\z'
setwd('~/QPMRFall2021/inclass/day1OLS/')
knitr::opts_chunk$set(echo = TRUE) #can set eval = FALSE if you do not want to run the code while compiling
setwd('~/QPMRFall2021/inclass/day1OLS/')
library(readstata13)
data = readstata13::read.dta13('TamingGods.dta')
#explore
colnames(data)
head(data)
summary(data)
mod = lm(Religion ~ Ethnic, data = data)
mod\
mod
summary(mod)
library(stargazer) #for making LaTex tables
stargazer(mod)
library(car)
qqPlot(mod) #check for error distribution - clearly not normal
plot(cooks.distance(mod)) #check for cook's influence - Cook's distance shows the influence of each observation on the fitted response values
par(mfrow = c(2,2)) #set up the plot to be 2x2 rows x columns
plot(mod)
par(mfrow = c(1,1))
mod.null = lm(Religion ~ 1, data = data[!is.na(data$Ethnic),])
anova(mod, mod.null) #check the model against the null (typically just controls)
summary(mod)
mod2 = lm(Religion ~ Ethnic*polity2_, data = data)
summary(mod2)
library(margins)
cplot(mod2, x = 'polity2_', what = 'effect', data = data)
mod3 = lm(Religion ~ Ethnic*polity2_ + I(polity2_ > 5), data = data)
cplot(mod3, x = 'polity2_', what = 'effect', data = data)
cplot(mod3, x = 'Ethnic', what = 'effect', data = data)
mod5 = lm(mpg ~ wt + I(wt^2), data = mtcars)
margins(mod5)
cplot(mod5, "wt", what = "prediction", main = "Predicted Fuel Economy, Given Weight")
cplot(mod5, "wt", what = "effect", main = "Average Marginal Effect of Weight")
mod6 = lm(mpg ~ hp * wt, data = mtcars)
persp(mod6, "wt", "hp", theta = c(45, 135, 225, 315), what = "effect")
setwd('~/QPMRFall2021/inclass/day2Assump/')
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
setwd('~/QPMRFall2021/inclass/day2Assump/')
load('merged.Rdata') #load the data
head(merged)
mergedY = merged[!is.na(merged$avgAA),]
#model sentiment towards US as a function of inflation, with theoretical controls
mod = lm(avgAA ~ inflation + exports + imports + aid + propEmig, data = mergedY)
summary(mod)
plot(mod, 2) #is this linear?
library(MASS)
boxcox(mod) #Box-Cox method only allows for strictly positive outcome
mod2 = lm(I(log(avgAA)) ~ inflation + exports + imports + aid + propEmig, data = mergedY)
summary(mod)
summary(mod2)
#plot(mod2, 2) #need to create a new variable (I is not allowed in this function)
mergedY$y = log(mergedY$avgAA)
mod3 = lm(y ~ inflation + exports + imports + aid + propEmig, data = mergedY)
plot(mod3, 2) #still does not solve it - let's look at densities
vars = c('avgAA', 'inflation', 'exports', 'imports', 'aid', 'propEmig')
mod4 = lm(y ~ I(log(inflation - min(inflation) + .01)) + I(log(exports - min(exports) + .01)) + I(log(imports - min(imports) + .01)) + I(log(aid - min(aid) + .01)) + I(log(propEmig - min(propEmig) + .01)), data = mergedY)
plot(mod4, 2)
boxcox(mod4)
summary(mod4)
#get it back to interpretable
coef(mod)[2]
#log(y) ~ log(X - c)*b
#exponentiate both sides
#y ~ (X - c)^b
ef = (mergedY$inflation - min(mergedY$inflation) + .01)^coef(mod4)[2]
plot(mergedY$inflation, ef) #diminshing effect
#what about uncertainty?
ef.lower = (mergedY$inflation - min(mergedY$inflation) + .01)^(coef(mod4)[2] - 1.96*coef(summary(mod4))[2, "Std. Error"])
ef.upper = (mergedY$inflation - min(mergedY$inflation) + .01)^(coef(mod4)[2] + 1.96*coef(summary(mod4))[2, "Std. Error"])
plot(mergedY$inflation, ef) #diminshing effect
segments(x0 = mergedY$inflation, y0 = ef.lower, x1 = mergedY$inflation, y1 = ef.upper)
library(margins)
x=cplot(mod4, x = 'inflation', what = 'effect') #what is the difference?
x[,2:4] = exp(x[,2:4])
plot(x[,1], x[,2])
segments(x0=x[,1], x1=x[,1], y0=x[,3], y1=x[,4])
getwd()
setwd('~/QRM/inclass/day1OLS/')
# Matrix Algebra
y = c(2,4,3,2) #vector
y
y
?matrix
X = matrix(c(5,3,4,5,6,5,3,2,4,5,6,3,5,5,4,2),
nrow = 4, ncol = 4, byrow = T) #matrix (you do not need to specify both cols and rows)
X
t(X) #transpose
solve(X) #inverse
solve(X) %*% X #identity
diag(1, 4) #identity
X = cbind(1, X) #add a column of 1's for the intercept
X
solve(t(X) %*% X) %*% t(X) %*% y
y
X
# solve(t(X) %*% X) %*% t(X) %*% y #linear model - why does it not work?
y = c(y, 6, 4.5, 5)
y
X = rbind(X, c(1, 2,6,4,3))
X = rbind(X, c(1, 3,4,5.5,2))
X = rbind(X, c(1, 4.6,7,3,2))
X
solve(t(X) %*% X) %*% t(X) %*% y
# lets put it in a function
linMod = function(X, y){
beta = solve(t(X) %*% X) %*% t(X) %*% y
se = sqrt(as.vector(t(y - X %*% beta) %*% (y - X %*% beta) / as.vector(nrow(X) - ncol(X))) * diag(solve(t(X) %*% X)))
return(cbind(beta, se))
}
linMod(X, y)
X
summary(lm(y ~ X - 1)) # -1 means do not fit an intercept (there is a column of ones)
X[, -1]
summary(lm(y ~ X[, -1])) # we could also drop the first column
library(readstata13)
data = readstata13::read.dta13('TamingGods.dta')
getwd()
list.files()
#explore
colnames(data)
head(data)
summary(data)
getwd()
mod = lm(Religion ~ Ethnic, data = data)
summary(mod)
library(stargazer) #for making LaTex tables
stargazer(mod)
summary(mod)
library(car)
qqPlot(mod) #check for error distribution - clearly not normal
plot(cooks.distance(mod)) #check for cook's influence - Cook's distance shows the influence of each observation on the fitted response values
par(mfrow = c(2,2)) #set up the plot to be 2x2 rows x columns
plot(mod)
par(mfrow = c(1,1))
mod.null = lm(Religion ~ 1, data = data[!is.na(data$Ethnic),])
anova(mod, mod.null) #check the model against the null (typically just controls)
mod2 = lm(Religion ~ Ethnic*polity2_, data = data)
summary(mod2)
library(margins)
cplot(mod2, x = 'polity2_', what = 'effect', data = data)
mod3 = lm(Religion ~ Ethnic*polity2_ + I(polity2_ > 5), data = data)
cplot(mod3, x = 'polity2_', what = 'effect', data = data)
cplot(mod3, x = 'Ethnic', what = 'effect', data = data)
mod4 = lm(Religion ~ Ethnic*polity2_ + democracy, data = data)
cplot(mod4, x = 'polity2_', what = 'prediction', data = data)
mod5 = lm(mpg ~ wt + I(wt^2), data = mtcars)
margins(mod5)
cplot(mod5, "wt", what = "prediction", main = "Predicted Fuel Economy, Given Weight")
cplot(mod5, "wt", what = "effect", main = "Average Marginal Effect of Weight")
mod6 = lm(mpg ~ hp * wt, data = mtcars)
persp(mod6, "wt", "hp", theta = c(45, 135, 225, 315), what = "effect")
setwd('~/QRM/inclass/day2Assump/')
load('merged.Rdata') #load the data
head(merged)
mergedY = merged[!is.na(merged$avgAA),]
#model sentiment towards US as a function of inflation, with theoretical controls
mod = lm(avgAA ~ inflation + exports + imports + aid + propEmig, data = mergedY)
summary(mod)
plot(mod, 2) #is this linear?
par(mfrow=c(1m1))
par(mfrow=c(1,1))
plot(mod, 2) #is this linear?
library(MASS)
boxcox(mod) #Box-Cox method only allows for strictly positive outcome
mod2 = lm(I(log(avgAA)) ~ inflation + exports + imports + aid + propEmig, data = mergedY)
summary(mod)
summary(mod2)
#plot(mod2, 2) #need to create a new variable (I is not allowed in this function)
mergedY$y = log(mergedY$avgAA)
mod3 = lm(y ~ inflation + exports + imports + aid + propEmig, data = mergedY)
plot(mod3, 2) #still does not solve it - let's look at densities
vars = c('avgAA', 'inflation', 'exports', 'imports', 'aid', 'propEmig')
vars
for(var in vars) plot(density(mergedY[,var]), main = var)
mod4 = lm(y ~ I(log(inflation - min(inflation) + .01)) + I(log(exports - min(exports) + .01)) + I(log(imports - min(imports) + .01)) + I(log(aid - min(aid) + .01)) + I(log(propEmig - min(propEmig) + .01)), data = mergedY)
plot(mod4, 2)
boxcox(mod4)
summary(mod4)
#get it back to interpretable
coef(mod)[2]
#get it back to interpretable
coef(mod4)[2]
#log(y) ~ log(X - c)*b
#exponentiate both sides
#y ~ (X - c)^b
ef = (mergedY$inflation - min(mergedY$inflation) + .01)^coef(mod4)[2]
plot(mergedY$inflation, ef) #diminshing effect
#what about uncertainty?
ef.lower = (mergedY$inflation - min(mergedY$inflation) + .01)^(coef(mod4)[2] - 1.96*coef(summary(mod4))[2, "Std. Error"])
ef.upper = (mergedY$inflation - min(mergedY$inflation) + .01)^(coef(mod4)[2] + 1.96*coef(summary(mod4))[2, "Std. Error"])
plot(mergedY$inflation, ef) #diminshing effect
segments(x0 = mergedY$inflation, y0 = ef.lower, x1 = mergedY$inflation, y1 = ef.upper)
library(margins)
x=cplot(mod4, x = 'inflation', what = 'effect') #what is the difference?
View(mergedY)
mod4
