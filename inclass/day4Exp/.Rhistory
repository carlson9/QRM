lm?
'
'
?lm
setwd('~/QPMRFall2021/inclass/day4Exp')
n.groups = 15
n.obs = 15
expand.grid(1:n.groups, 1:n.obs)
expand.grid(1:n.groups, 1:n.obs)
expand.grid(1:n.groups, 1:n.obs)
returnMat = expand.grid(1:n.groups, 1:n.obs)
colnames(returnMat) = c('Group', 'Time')
head(returnMat)
returnMat$x = NA
head(returnMat)
returnMat$x[returnMat$Time == 1] = rnorm(n.groups)
err = numeric(n.obs*n.groups)
er
err
err[returnMat$Time == 1] = rnorm(n.groups)
for(g in 1:n.groups){
for(t in 2:n.obs){
returnMat$x[returnMat$Group == g & returnMat$Time == t] = rho * returnMat$x[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
err[returnMat$Group == g & returnMat$Time == t] = rho * err[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
}
}
rho=.8
for(g in 1:n.groups){
for(t in 2:n.obs){
returnMat$x[returnMat$Group == g & returnMat$Time == t] = rho * returnMat$x[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
err[returnMat$Group == g & returnMat$Time == t] = rho * err[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
}
}
returnMat
err = scale(err)
err
g.ef = rnorm(n.groups)
# lets create a function to generate one tscs sample with auto-correlation
tscsGen = function(rho, n.groups = 15, n.obs = 15, seed = 1523){
set.seed(seed)
returnMat = expand.grid(1:n.groups, 1:n.obs)
colnames(returnMat) = c('Group', 'Time')
returnMat$x = NA
returnMat$x[returnMat$Time == 1] = rnorm(n.groups)
err = numeric(n.obs*n.groups)
err[returnMat$Time == 1] = rnorm(n.groups)
for(g in 1:n.groups){
for(t in 2:n.obs){
returnMat$x[returnMat$Group == g & returnMat$Time == t] = rho * returnMat$x[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
err[returnMat$Group == g & returnMat$Time == t] = rho * err[returnMat$Group == g & returnMat$Time == (t - 1)] + sqrt(1 - rho^2)*rnorm(1)
}
}
err = scale(err)
g.ef = rnorm(n.groups)
returnMat$y = -1 + rep(g.ef, times = n.groups) + .4*returnMat$x + err
return(returnMat)
}
data = tscsGen(rho = .8)
head(data)
#the goal is to plot every trend in x on one window
plot(data$x[data$Group == 1] ~ unique(data$Time), type = 'l')
#notice there are also different baselines
#now lets plot y as a function of x, first all points
plot(data$y ~ data$x, type = 'p',
xlab = 'x', ylab = 'x', cex = .3)
#add a line of best fit
abline(lm(y ~ x, data))
#now lets allow different baselines
#notice the as.factor
mod = lm(y ~ x + as.factor(Group) - 1, data)
summary(mod)
#now lets allow different baselines
#notice the as.factor
mod = lm(y ~ x + as.factor(Group), data)
summary(mod)
#now lets allow different baselines
#notice the as.factor
mod = lm(y ~ x + as.factor(Group) - 1, data)
plot(data$y[data$Group == 1] ~ data$x[data$Group == 1], type = 'p',
xlab = 'x', ylab = 'y', ylim = c(min(data$y)-.1, max(data$y) +1),
xlim = c(min(data$x)-.1, max(data$x) +.1),
col = col[1], pch = 1, cex = .3)
#now lets allow different baselines
#notice the as.factor
mod = lm(y ~ x + as.factor(Group) - 1, data)
mod1 = lm(y ~ x, data)
summary(mod1)
confint(mod)[1,1]
confint(mod)[1,2]
confint(mod)[1,1] < .4 & confint(mod)[1,2] > .4
load('sims.Rdata')
plot(toAnalyze[[1]] ~ seq(0, .9, by=.1), ylim = c(0,1), type = 'l',
xlab = expression(rho), ylab = 'True Rate')
points(toAnalyze[[2]] ~ seq(0, .9, by=.1), type='l', lty = 2)
